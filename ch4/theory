Review

1. What is a computation? 
A computation is a procedure in which input is transformed into output through a set of definite operations on the input. Squaring a number is a computation in which the number (input) is transformed into its square (output) through a procedure (algorithm).

2. What do we mean by inputs and outputs to a computation? Give examples.
An input is the value a computation works on. The input can come from keyboards, other programs, and physical data (such as temperature). The output can be to a computer screen, a sound instrument, or other programs.

3. What are the three requirements a programmer should keep in mind when expression computations?
The computation should produce correct results, it should be simple, and it should be efficient – in that order.

4. What does an expression do?
An expression computes value from operands to a number. A literal is the simplest expression.

5. What is the difference between a statement and an expression as described in this chapter?
All expressions are statements but all statements are not expressions. An example of a statement (but not expression) is INT X = 10; 

6. What is an LVALUE? List the operators that require an LVALUE. Why do these operators, and not the others, require an LVALUE?
An LVALUE is the name of a object. Four operators require LVALUE. (a) The pre-increment operator, (b) the pre-decrement operator, (c) the assignment operator, and (d) the compound assignment operator. It's easy to explain why (c) and (d) require an LVALUE. It's not possible to assign a value to another value (RVALUE). For instance, it's logically inconsistent to write 400 = 10; or 500 *= 10; The case of (a) and (b) is difficult.

7. What is a constant expression?
A constant expression assigns a name to a object whose RVALUE never changes.

8. What is a literal?
A literal is the simplest expression. It's interpreted as it is. 

9. What is a symbolic constant and why do we use them?
A symbolic constant is a named a constant. We use them because names are meaningful, speed_of_light as opposed to 300000, and increase readability.

10.  What is a magic constants? Give examples.
Magic constants are literals whose values aren't supposed to change in a program.

11. What are some operators that we can use for integers and floating-point values?
+, -, /, and * are some operators that can be used for integers and floating-point values.

12. What operators can be used on integers but not floating-point values?
The modulo operator can't be used on floating-point values, but it's a legal operator for integers.

13. What are some of the operators that can be used for strings?
Strings can be concatenated (+) and compared (<, >, ==, and !=).

14. When would a programmer prefer a SWITCH-statement to an IF-statement?
A programmer will prefer a SWITCH-statement to an IF-statement to avoid excessive nesting. 

15. What are some of the common problems with SWITCH-statements?
They can't be used on any data type other than CHAR. Even then the CHAR can't be a variable.

16. What is the function of each part of the header line in a FOR-loop, and in what sequence they are executed?
The header line of a FOR-loop resembles for (int x = INT; x operand NUMBER; ++x). Part one is executed first, followed by part two. Then comes the turn of the body. It's only after the body has been executed does the turn come of part three.

Wednesday, October 19, 2016

17. When should the FOR-loop be used and when should the WHILE-loop be used?
A WHILE-loop can be used when there's a need for a repetition. A FOR-loop is a special case of a WHILE-loop; the former is used when the control condition is to iterate over a number.

18. How do you print the numeric value of a char?
Create an object, define its type char, name it TEST_LETTER, and initialize it with a letter. CHAR TEST_LETTER = 'c';. Assign the LVAL of TEST_LETTER to an INT whose LVAL is TEST_INT. INT TEST_INT = TEST_LETTER; Print TEST_INT. The value that'll display on screen will be the numeric value of RVAL of TEST_LETTER.

19. Describe what the line CHAR FOO (INT X) means in a function definition.
FOO is a function that returns an object of type CHAR. FOO works on INT objects. 

20. When should you define a separate function for part of a program? List reasons.
A separate function is helpful when a part of a program does little more than compute at more than one place and the detail of its implementation can be conveniently hidden without decreasing the readability of code. For instance, a program that prints a list of the first 10 squares will be more readily readable, easy-to-debug, and less prone to errors if the task of squaring numbers is relegated to a function. Instead of reading identical code 10 times, a programmer will see a function invoked 10 times.

21. What can you do to an INT that you can't do to a STRING?
The minus sign (-), the modulo operator (%), the division sign (/), and several other operators work on INT objects but fail when the operands are two or more STRINGS.

An INT less than or equal to 255 can be converted into a CHAR. It isn't possible with a STRING object.

22. What can you do to a STRING that you can't do to an INT?
Two STRINGS can be concatenated, but two INTS can only be added.

23. What is the index of the third element of a vector?
Two.

24. How do you write a FOR-loop that prints every element of a vector?
FOR (int x = 0; x < VECTOR.SIZE(); ++x) {
 cout << x << endl;
}

25. What does the VECTOR <CHAR> alphabet (26) do?
It creates a vector with 26 CHAR objects.

26. Description what push_back() does to a vector?
It takes an object and appends it to an existing vector. push_back() fails when the type of the object being appended to a vector doesn't match with the type of the other objects in the vector.

27. What do vector's member functions begin(), end(), and size() do?
The member function begin() finds the smallest value, end() hunts down the largest, and size() tells a programmer how many elements are in the vector.

28. What makes vector so powerful/useful?
Vectors make it easy to work on data of similar kind.

29. How do you sort the elements of a vector?
The sort function, sort(), can be called. Its syntax is: sort() (foo.begin(), foo.end());
Terms

1. Abstraction: A useful model of a physical object that can be computed or worked on mathematically.
2. begin(). A vector member function to find the smallest value in a vector.
3. Computation. A procedure through which an input is transformed into an output.
4. Conditional statement. A statement that is called only when a condition is true.
5. Declaration. One of more statements at the beginning of a program telling a programmer the functions that will be used in the program.
6. Definition. The function body of a program is its definition.
7. Divide and conquer. To break a complex problem into several parts and work them out one at a time.
8. else. A C++ reserved name; often used with if.
9. end(). A vector member function to find the largest value in a vector.
10. Expression. A statement that evaluates to a value.
11. for-statement. A useful way to iterate over numbers.
12. Function. A logical unit. It's a useful way to add abstraction.
13. if-statement. A way to call conditional statements.
14. Increment. An increase.
15. Input. Data a computation works on.
16. Iteration. Running a function over and over until a Boolean condition is true or false.
17. Loop. An iterative function.
18. LVALUE. The name of a variable object. In “int x = 10;” x is LVALUE.
19. Member function. A set of computations that are so common that they are available as part of libraries and can be called with the syntax “dot function name (parameters).” 
20. Output. The result of a computation.
21. push_back(). A vector member function; adds a new element to a vector.
22. Repetition. Two identical functions in a code are said to be repetitive.
23. RVALUE. The literal value of an object. See. LVALUE.
24. Selection. To choose from more than one statement. Conditional statements are a useful way to select which part of a program will execute.
25. size(). A vector member function; finds the number of elements in a vector.
26. sort(). A vector member function; sorts the elements according to parameters.
27. Statement. A line of code that doesn't necessarily compute to a value. It's a superset of expression.
28. switch-statement. Useful when there are multiple selections to be made and nesting stemming from if-statements is to be avoided. Has its limitations.
29. Vector. A data structure in C++. Holds elements of the identical type in an array.
30. while-statement. A way to iterate.


Notes

Our goals as programmers is to write programs that compute – correctly, simply, and efficiently. 
Two ways to organize a program are abstraction and the divide and conquer strategy. Abstraction hides complex detail behind a general interface. 
To create programs other people can depend on for their livelihood, it's important to pay attention to code's structure and organization.
Why do we distinguish between the LVALUE and RVALUE of a variable's name? The LVALUE of a variable is the name of a object. The RVALUE of an variable is the value of the object named by the variable. 
Avoid sprinkling literals in your code. An alternative is to use symbolic consonants.
It's important to test for bad input.
Five technicalities of SWITCH-statements. (pp. 105)
Programs are usually easier to write and understand if each function performs a single logical action.

What is an expression?
An expression computes value from operands to a number. A literal is the simplest expression.

Why is A < B < C an error?
A < B is a Boolean expression that evaluates to either true or false. In either case the final expression becomes TRUE < C or FALSE < C, which is meaningless.